<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[编程用*显示出三角形]]></title>
    <url>%2F2019%2F08%2F04%2F%E7%BC%96%E7%A8%8B%E7%94%A8-%E6%98%BE%E7%A4%BA%E5%87%BA%E4%B8%89%E8%A7%92%E5%BD%A2%2F</url>
    <content type="text"><![CDATA[编程显示出三角形并不难，但是需要思路清晰，下面我们就来分析一下该如何编程： 当输入为4时输出如下图形： 首先，该图形是由空格和*表示的 当输入为4时： 第一行：空格数为6-1=5；*数为2乘行数减1=1； 第二行：空格数为6-2=4；*数为2乘行数减1=3； 第三行：空格数为6-3=3；*数为2乘行数减1=5； 第四行：空格数为6-4=2；*数为2乘行数减1=7； 由此可归纳出：若输入值为n，第i行的空格数为n-i；*数为2i-1个；然后再利用循环嵌套 这个程序就很容易写出来了，如下： #include “stdio.h” void main() { int i,j,n; scanf(“%d”,&amp;n); for(i=1;i&lt;=n;i++) { for(j=1;j&lt;=n-i;j++) printf(“ “); for(j=1;j&lt;=2*i-1;j++) printf(“*”); printf(“\n”); } }]]></content>
  </entry>
  <entry>
    <title><![CDATA[switch case 语句]]></title>
    <url>%2F2019%2F08%2F03%2Fswitch-case-%E8%AF%AD%E5%8F%A5%2F</url>
    <content type="text"><![CDATA[switch(整形表达式) { case 常量1： 语句； case 常量2： 语句； case 常量3： 语句； default： 语句; } 注意：switch在圆括号中的测试表达式的值应该是一个整数值（包括char类型）。case标签必须是整数类型（包括char类型）的常量或整形常量表达式。不能用变量作为case的标签。 在switch case语句中，还有一个break的问题 若在case后加上break则程序会直接退出switch语句，若没有break语句，那么程序会在case语句执行完继续执行下一个case语句，比如： int a=1; switch (num) { case 1: a=2; case 2: a=a+1; case 3: a=a+2; default: a=a+3; } 若输入的num的值为2，无break的最后a的值为1+1+2+3=7 int a=1; switch (num) { case 1: a=2; break; case 2: a=a+1; break; case 3: a=a+2; break; default: a=a+3; } 若输入的num的值为2，有break的最后a的值为1+1=2]]></content>
  </entry>
  <entry>
    <title><![CDATA[逻辑运算符及条件运算符]]></title>
    <url>%2F2019%2F08%2F02%2F%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6%E5%8F%8A%E6%9D%A1%E4%BB%B6%E8%BF%90%E7%AE%97%E7%AC%A6%2F</url>
    <content type="text"><![CDATA[下面给大家介绍一下逻辑运算符和逻辑表达式 逻辑运算符有； &amp;&amp; 与 || 或 ！ 非 优先级： ！&gt;&amp;&amp; &gt;|| 逻辑表达式：当且仅当expression1和expression2都为真，expression1&amp;&amp;expression2才为真。 如果expression1或expression2为真，expression1||expression2为真。 如果expression为假，!expression则为真，反之亦然。 条件运算符： ​ ？： 有下面语句： if(y&lt;0) x=-y; else x=y; 该语句的意思是“如果y小于0，那么x=-y；否则，x=y”，该语句可用条件表达式表达如下： x=(y&lt;0)?-y:y 条件表达式的通用形式如下： expression1?expression2:expression3 如果expression1为真，那么整个表达式的值与expression2的值相同； 如果expression1为假，那么整个表达式的值与expression3的值相同；]]></content>
  </entry>
  <entry>
    <title><![CDATA[利用简单的if语句判断素数]]></title>
    <url>%2F2019%2F08%2F02%2F%E5%88%A9%E7%94%A8%E7%AE%80%E5%8D%95%E7%9A%84if%E8%AF%AD%E5%8F%A5%E5%88%A4%E6%96%AD%E7%B4%A0%E6%95%B0%2F</url>
    <content type="text"><![CDATA[判断素数这个问题是c语言条件，循环中最简单的一个问题 下面就来介绍一下判断素数的代码吧 #include “stdio.h” void main() { int x,i; int flag=1; scanf(“%d”,&amp;x); for(i=2;i&lt;x;i++) { if(x%i==0) flag=0; } if(flag==1) printf(“%d是素数”,x); else printf(“%d不是素数”,x); } 在该程序中，你可以任意输入一个整型数来判断输入的数是否为素数。当然还有一类题是已经给出你范围，让你打印出在这个范围内的素数，以下代码则可以实现： #include “stdio.h” void main() { int i,flag; int m; for(m=3;m&lt;=200;m++) { flag=1; for(i=2;i&lt;m;i++) { if(m%i==0) flag=0; } if(flag==1) printf(“%d “,m); else printf(“ “); } } 在该代码中m的范围在3200，即该程序目的是打印出3200范围内的所有素数，该程序的核心代码与上述代码是一致的，不同的是在该程序中添加了一个循环，这个循环正好是将3~200之间的数字循环一遍。]]></content>
  </entry>
  <entry>
    <title><![CDATA[多重选择else if]]></title>
    <url>%2F2019%2F08%2F01%2F%E5%A4%9A%E9%87%8D%E9%80%89%E6%8B%A9else-if%2F</url>
    <content type="text"><![CDATA[else if 是if else语句的变式。 例如以下部分代码： if(score&lt;1000) bonus=0; else if(score&lt;1500) bonus=1; else if(score&lt;2000) bonus=2; else if(score&lt;2500) bonus=4; else bonus=6; 以上代码的通俗解释：如果score&lt;1000，那么bonus=0；如果score在10001500之间，那么bonus=1；如果score在15002000之间，那么bonus=2；如果score在2000~2500之间，那么bonus=4；如果score&gt;2500，那么bonus=6。 上述代码还有另一种写法： if(score&lt;1000) ​ bonus=0; else ​ if(score&lt;1500) ​ bonus=1; ​ else ​ if(score&lt;2000) ​ bonus=2; ​ else ​ if(score&lt;2500) ​ bonus=4; ​ else ​ bonus=6;]]></content>
  </entry>
  <entry>
    <title><![CDATA[if语句]]></title>
    <url>%2F2019%2F07%2F30%2Fif%E8%AF%AD%E5%8F%A5%2F</url>
    <content type="text"><![CDATA[if 条件语句 ​ 简单形式的if语句可以让程序选择执行一条语句，或者跳过这条语句。 ​ 通用形式如下： ​ if(expression) ​ statement; ​ 如果对expression求值为真（非0），则执行statement；否则，跳过statement. if else语句 ​ 通用形式如下： ​ if(expression) ​ statement1; ​ else ​ statement2; ​ 如果expression为真（非0），则执行statement1;如果expression为假或0，则执行else后面的 statement2. 介绍一下getchar()和putchar() ​ getchar()为字符输入函数，该函数不带任何参数，它从输入队列中返回下一个字符。 ​ 例如： ​ ch=getchar(); //读取下一个字符输入，并把该字符的值赋给变量ch; ​ 该句与scanf(“%c”,&amp;ch);效果相同。 ​ putchar()为字符输出函数，该函数打印它的参数。 ​ 例如： ​ putchar(ch); //把之前赋给ch的值作为字符打印出来； ​ 该句与printf(“%c”,ch);效果相同。 下面给出一个例子： #include “stdio.h” #define SPACE ‘ ‘ void main() { char ch; ch=getchar(); //读取一个字符 while(ch!=’\n’) //当一行未结束时 { if(ch==SPACE) //留下空格 putchar(ch); //该字符不变 else putchar(ch+1); //改变其它字符 ch=getchar(); //获取下一个字符 } putchar(ch); //打印换行符 } 在该程序中，若输入空格，则输出仍是空格，若输入是字符，则输出为输入加一的字符，若换行则结束循环。 ​]]></content>
  </entry>
  <entry>
    <title><![CDATA[计算一个数的整数次幂]]></title>
    <url>%2F2019%2F07%2F30%2F%E8%AE%A1%E7%AE%97%E4%B8%80%E4%B8%AA%E6%95%B0%E7%9A%84%E6%95%B4%E6%95%B0%E6%AC%A1%E5%B9%82%2F</url>
    <content type="text"><![CDATA[不直接使用pow()函数计算一个数的整数次幂 #include “stdio.h” double power(double n,int p); void main() { double x,xpow; int exp; printf(“输入一个数及要求指数幂\n”); while(scanf(“%lf%d”,&amp;x,&amp;exp)==2) { xpow=power(x,exp); printf(“%lf的%d指数幂结果为%.3lf\n”,x,exp,xpow); } } double power(double n,int p) { double pow=1; int i; for(i=1;i&lt;=p;i++) pow*=n; return pow; } 注意：Scanf()函数的返回值：返回成功读取的项数。如果没有读取任何项，且需要读取一个数字而用户却输入一个非数值字符串，scanf()便返回0； Printf()函数返回值：返回打印字符的个数]]></content>
  </entry>
  <entry>
    <title><![CDATA[循环的嵌套变式]]></title>
    <url>%2F2019%2F07%2F30%2F%E5%BE%AA%E7%8E%AF%E7%9A%84%E5%B5%8C%E5%A5%97%E5%8F%98%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[依赖外部循环的嵌套循环： #include “stdio.h” void main() { const int ROWS=6; const int CHARS=6; int row; char ch; for(row=0;row&lt;ROWS;row++) { for(ch=(‘A’+row);ch&lt;(‘A’+CHARS);ch++) printf(“%c”,ch); printf(“\n”); } } 输出为： ABCDEF BCDEF CDEF DEF EF F 在这里说明一下const. const限定符(只读)，例如：const int a=12;//表示a值为12，且在程序中不可更改。 Int * const p=&a;//p不变 Const int * p=&amp;a//a不变 *p为指针变量，在之后的学习中会学到，是C语言中非常重要的一部分。]]></content>
  </entry>
  <entry>
    <title><![CDATA[do……while语句]]></title>
    <url>%2F2019%2F07%2F30%2Fdo%E2%80%A6%E2%80%A6while%E8%AF%AD%E5%8F%A5%2F</url>
    <content type="text"><![CDATA[do_while语句保证了至少执行循环体中的内容一次。 例如： #include “stdio.h” void main() { int a; do{ scanf(“%d”,&amp;a); printf(“a=%d\n”,a); } while (a!=20); printf(“a=20\n”); } 在该程序中会输入几个数值，输出结果为a=你输入的数值，当输入的数值为20时，就会跳出循环终止程序。 注意：在do_while循环中要以分号结尾。]]></content>
  </entry>
  <entry>
    <title><![CDATA[for循环]]></title>
    <url>%2F2019%2F07%2F29%2Ffor%E5%BE%AA%E7%8E%AF%2F</url>
    <content type="text"><![CDATA[for循环也是一个可以不用进入循环语句的循环， 例如： #include “stdio.h” void main() { int num; for(num=1;num&gt;=6;num–) printf(“good\n”); printf(“num=1\n”); } 这个for循环不进入循环语句中，输出为num=1; for后的第一条语句是定义给变量赋初值亦或是使用printf()函数，在执行循环的其他部分之前，只对第一个表达式求值一次或者赋值一次。]]></content>
  </entry>
  <entry>
    <title><![CDATA[C语言逗号表达式]]></title>
    <url>%2F2019%2F07%2F29%2FC%E8%AF%AD%E8%A8%80%E9%80%97%E5%8F%B7%E8%A1%A8%E8%BE%BE%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[逗号在C语言中有很多用处 定义变量类型时： int a,b,c; 定义了三个整型变量a,b,c; 逗号表达式从左向右计算，逗号左侧表达式所有的副作用都在逗号右侧表达式之前运算完成 ounces++,cost=ounces*FIRST_OZ 在该表达式中，先递增ounces,然后在第二个子表达式中使用ounces的新值。 在逗号表达式中，整个逗号表达式的值是右侧项的值 houseprice=249,500;相当于： houseprice=249; 500; houseprice=(249,500);相当于： houseprice=500;]]></content>
  </entry>
  <entry>
    <title><![CDATA[while循环]]></title>
    <url>%2F2019%2F07%2F29%2Fwhile%E5%BE%AA%E7%8E%AF%2F</url>
    <content type="text"><![CDATA[while循环使用时，可以不进入循环 例如： #include “stdio.h” void main() { int a; a=2; while(a&lt;2) { printf(“good\n”); a++; } printf(“a=2\n”); } 在该循环中，while循环不进入，即输出没有good. 在该程序中，输出只有a=2； while循环可认为是“当”，当while后的语句为真时才继续进入循环 使用关系运算符时，可以比较浮点数的大小，但是尽量使用&lt;和&gt;，当存储的数据为1/3时，3*1/3的结果为1.0，但如果把1/3表示成小数点后六位，最终的结果就为0.999999，不等于1，使用fabs()函数来比较浮点数大小，即fabs(a-b&gt;0.0001); 新的_Bool类型，类似于int型变量，_Bool型是C语言中布尔变量的类型名，但_Bool类型只能储存1（真）和0（假）。如果把非0变量数值赋给_Bool类型的变量，该变量会被设置为1.]]></content>
  </entry>
  <entry>
    <title><![CDATA[简单的程序示例]]></title>
    <url>%2F2019%2F07%2F18%2F%E7%AE%80%E5%8D%95%E7%9A%84%E7%A8%8B%E5%BA%8F%E7%A4%BA%E4%BE%8B%2F</url>
    <content type="text"><![CDATA[刚开始学习C语言，大家一定有许多问题，程序设计是特别严谨的，一些小的错误就会导致无法输出，下面就给大家介绍一个小的程序。 #include &lt;stdio.h&gt; int main() { int num; //定义一个整型变量称为num num=1; //将1赋给num，即num的值为1 printf(“I am a student.\n”); //使用printf（）函数输出，\n起换行作用。 printf(“I love China.\n”); return 0; } 以上代码直接可在Visual C++上编译运行，在写代码时要注意空格位置的适当以及代码中的所有标点符号均为英文。//则代表注释行，//后的语句计算机将不识别。]]></content>
  </entry>
  <entry>
    <title><![CDATA[冒泡排序]]></title>
    <url>%2F2019%2F06%2F16%2F%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%2F</url>
    <content type="text"><![CDATA[之前面试实验室，所有实验室都会问到这个问题，可以说这个问题是学了循环和数组之后最基础的问题，今天deer就来回忆回忆 #include &lt;stdio.h&gt; int main() { int i=0; int j=0,t=0; int a[5]={32,78,31,89,65}; for(i=0;i&lt;5;i++) { for(j=0;j&lt;5-i-1;j++) if(a[j]&gt;a[j+1]) { t=a[j]; a[j]=a[j+1]; a[j+1]=t; } } printf(“排序结果为：\n”); for(i=0;i&lt;5;i++) printf(“%d “,a[i]);} 冒泡排序法是一种简单的交换类排序方法，它是通过相邻的数据元素的交换，逐步将待排序序列变为有序序列的过程]]></content>
  </entry>
  <entry>
    <title><![CDATA[第一篇博客]]></title>
    <url>%2F2019%2F06%2F15%2F%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[欢迎来到muhy0402的博客空间，本人乃一道友，有兴趣的小伙伴可以❀互相交流❀呦，第一次写博客还有些小紧张，在之后，我会不定时的在上面发表自己的小成果和看法，希望大家多多指教！]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F06%2F15%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
